parameters:
- name: environment
  displayName: 'Select Environment'
  type: string
  default: 'dev'
  values:
    - dev
    - uat
    - prod

trigger:
  branches:
    include:
      - 

pool:
  vmImage: 'ubuntu-latest'

variables:
  acrServiceConn: 'acr-service-conn'
  imageName: 'dotnet-mvc-app'
  dockerfilePath: 'dotnet/aspnet-core-dotnet-core/Dockerfile'
  buildContext: '$(Build.SourcesDirectory)/dotnet'
  buildConfiguration: 'Release'
  aksClusterName: 'demo-aks-cluster'
  aksResourceGroup: 'chidiebere-deployment'
  kubernetesNamespace: 'default'
  kubectlVersion: '1.23.0'
  azureSubscription: 'chidi-to-azure-sponsorship'
  dotnet_folder: '$(System.DefaultWorkingDirectory)/dotnet/aspnet-core-dotnet-core/'

stages:
- stage: Build
  jobs:
  - job: BuildAndPushImage
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build .NET application'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run .NET tests'
      inputs:
        command: 'test'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET application'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'
        zipAfterPublish: true

    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: $(acrServiceConn)
        repository: $(imageName)
        command: 'buildAndPush'
        Dockerfile: $(dockerfilePath)
        buildContext: '$(buildContext)'
        tags: |
          v1.0.0

- stage: Deploy
  dependsOn: Build
  jobs:
  - job: DeployToAKS
    steps:
    - task: AzureCLI@2
      displayName: 'ACR Image Pull, Deploy App and Grafana to AKS'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get AKS credentials
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName)

          # Apply the Kubernetes deployment and service
          kubectl apply -f dotnet/aspnet-core-dotnet-core/dotnet-app-deployment.yaml
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName)
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          kubectl create ns prometheus
          helm install prometheus prometheus-community/kube-prometheus-stack -n prometheus
          kubectl get all -n prometheus
    - script: |
          docker run -v $(dotnet_folder):/yaml stackrox/kube-linter lint /yaml
      displayName: Run Static Code analysis for Kubernetes dotnet manifest files
      continueOnError: true
      



